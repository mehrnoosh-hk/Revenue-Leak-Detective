// Code generated by generate_domain_models.go.
// This file is generated from the sqlc models.go file for developers convinience.
// Check the sqlc models.go file for the source of truth.

package models

import (
	"errors"
	"time"

	"github.com/google/uuid"
)

// Leak represents the domain model for Leak
type Leak struct {
	ID         uuid.UUID    `json:"id"`
	TenantID   uuid.UUID    `json:"tenant_id"`
	CustomerID uuid.UUID    `json:"customer_id"`
	LeakType   LeakTypeEnum `json:"leak_type"`
	Amount     float32      `json:"amount"`
	Confidence int32        `json:"confidence"`
	CreatedAt  time.Time    `json:"created_at"`
	UpdatedAt  time.Time    `json:"updated_at"`
}

// CreateLeakParams represents parameters for creating a Leak
type CreateLeakParams struct {
	TenantID   uuid.UUID    `json:"tenant_id"`
	CustomerID uuid.UUID    `json:"customer_id"`
	LeakType   LeakTypeEnum `json:"leak_type"`
	Amount     float32      `json:"amount"`
	Confidence int32        `json:"confidence"`
}

// UpdateLeakParams represents parameters for updating a Leak
type UpdateLeakParams struct {
	ID         uuid.UUID     `json:"id"` // Primary key
	TenantID   *uuid.UUID    `json:"tenant_id"`
	CustomerID *uuid.UUID    `json:"customer_id"`
	LeakType   *LeakTypeEnum `json:"leak_type"`
	Amount     *float32      `json:"amount"`
	Confidence *int32        `json:"confidence"`
}

var (
	ErrInvalidAmount = errors.New("amount must be greater than 0")
	ErrInvalidConfidence = errors.New("confidence must be between 0 and 100")
)

func (l *Leak) Validate() error {
	if l.Amount <= 0 {
		return ErrInvalidAmount
	}
	if l.Confidence < 0 || l.Confidence > 100 {
		return ErrInvalidConfidence
	}
	return nil
}
