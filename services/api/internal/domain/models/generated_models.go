// Code generated by generate_domain_models.go. DO NOT EDIT.

package models

import (
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	sqlc "rdl-api/internal/db/sqlc"
	"time"
)

// User represents the domain model for User
type User struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// ToUser converts sqlc.User to domain.User
func ToUserDomain(s sqlc.User) *User {
	return &User{
		ID:        s.ID.Bytes,
		Email:     s.Email,
		Name:      s.Name,
		CreatedAt: s.CreatedAt.Time,
		UpdatedAt: s.UpdatedAt.Time,
	}
}

// ToUserSqlc converts domain.User to sqlc.User
func ToUserSqlc(d *User) sqlc.User {
	return sqlc.User{
		ID:        pgtype.UUID{Bytes: d.ID, Valid: true},
		Email:     d.Email,
		Name:      d.Name,
		CreatedAt: pgtype.Timestamptz{Time: d.CreatedAt, Valid: true},
		UpdatedAt: pgtype.Timestamptz{Time: d.UpdatedAt, Valid: true},
	}
}

// Parameter structs for repository operations

// CreateUserParams represents parameters for creating a User
type CreateUserParams struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

// UpdateUserParams represents parameters for updating a User
type UpdateUserParams struct {
	ID        uuid.UUID  `json:"id"` // Primary key
	Email     *string    `json:"email"`
	Name      *string    `json:"name"`
	UpdatedAt *time.Time `json:"updated_at"`
}
