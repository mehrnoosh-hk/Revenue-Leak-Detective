// Package models contains domain models for the business entities.
// This package defines the core data structures and types used throughout
// the application.
package models

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

// Event represents the domain model for Event in the system.
//
// Fields:
//   - ID: Unique identifier for the event (UUID)
//   - TenantID: Reference to the tenant that owns this event
//   - ProviderID: Reference to the provider associated with this event (e.g. Stripe, PayPal, etc.)
//   - EventID: External identifier for the event (e.g. Stripe webhook ID, PayPal webhook ID, etc.)
//   - EventID: External for the event (e.g. Stripe webhook ID, PayPal webhook ID, etc.)
//   - Status: Current processing status of the event (see EventStatusEnum)
//   - Data: Flexible field containing event-specific payload data
//   - CreatedAt: Timestamp when the event was first created
//   - UpdatedAt: Timestamp when the event was last modified
type Event struct {
	ID         uuid.UUID        `json:"id"`
	TenantID   uuid.UUID        `json:"tenant_id"`
	ProviderID uuid.UUID        `json:"provider_id"`
	EventType  EventTypeEnum    `json:"event_type"`
	EventID    string           `json:"event_id"`
	Status     EventStatusEnum  `json:"status"`
	Data       *json.RawMessage `json:"data"`
	CreatedAt  time.Time        `json:"created_at"`
	UpdatedAt  time.Time        `json:"updated_at"`
}

// CreateEventParams represents parameters for creating a new Event.
// This struct is used as input for event creation operations,
// containing all required fields except for ID, CreatedAt, and UpdatedAt
// which are typically generated by the system.
//
// All fields are required for event creation:
//   - TenantID: Must be a valid tenant UUID that exists in the system
//   - ProviderID: Must be a valid provider UUID associated with the tenant
//   - EventType: Must be a valid EventTypeEnum value
//   - EventID: Business identifier, should be unique within the provider context
//   - Status: Initial status, typically EventStatusPending or EventStatusReceived
//   - Data: Event payload, can be any JSON-serializable data structure
type CreateEventParams struct {
	TenantID   uuid.UUID       `json:"tenant_id"`
	ProviderID uuid.UUID       `json:"provider_id"`
	EventType  EventTypeEnum   `json:"event_type"`
	EventID    string          `json:"event_id"`
	Status     EventStatusEnum `json:"status"`
	Data       any             `json:"data"`
}

// UpdateEventParams represents parameters for updating an existing Event.
// This struct is used for partial updates where only specific fields
// need to be modified. All fields except ID are optional (pointers),
// allowing for selective updates.
//
// Fields:
//   - ID: Required field identifying which event to update
//   - TenantID: Optional - new tenant assignment (use with caution)
//   - ProviderID: Optional - new provider assignment (use with caution)
//   - EventType: Optional - change the event classification
//   - EventID: Optional - update the business identifier (use with caution)
//   - Status: Optional - change the processing status (most common update)
//   - Data: Optional - replace or update the event payload (use with caution)
//
// Note: UpdatedAt timestamp is handled automatically by the persistence layer.
type UpdateEventParams struct {
	EventType *EventTypeEnum   `json:"event_type"`
	Status    *EventStatusEnum `json:"status"`
	Data      *json.RawMessage `json:"data"`
	ID        uuid.UUID        `json:"id"`
}
