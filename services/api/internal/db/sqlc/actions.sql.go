// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: actions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllActions = `-- name: CountAllActions :one
SELECT COUNT(*) FROM actions
`

func (q *Queries) CountAllActions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllActions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAction = `-- name: CreateAction :one
INSERT INTO actions (leak_id, action_type, status, result) VALUES ($1, $2, $3, $4) RETURNING id, leak_id, action_type, status, result, created_at, updated_at
`

type CreateActionParams struct {
	LeakID     pgtype.UUID      `json:"leak_id"`
	ActionType ActionTypeEnum   `json:"action_type"`
	Status     ActionStatusEnum `json:"status"`
	Result     ActionResultEnum `json:"result"`
}

func (q *Queries) CreateAction(ctx context.Context, arg CreateActionParams) (Action, error) {
	row := q.db.QueryRow(ctx, createAction,
		arg.LeakID,
		arg.ActionType,
		arg.Status,
		arg.Result,
	)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.LeakID,
		&i.ActionType,
		&i.Status,
		&i.Result,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAction = `-- name: DeleteAction :execrows
DELETE FROM actions WHERE id = $1
`

func (q *Queries) DeleteAction(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAction, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getActionByID = `-- name: GetActionByID :one
SELECT id, leak_id, action_type, status, result, created_at, updated_at
FROM actions
WHERE id = $1
`

func (q *Queries) GetActionByID(ctx context.Context, id pgtype.UUID) (Action, error) {
	row := q.db.QueryRow(ctx, getActionByID, id)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.LeakID,
		&i.ActionType,
		&i.Status,
		&i.Result,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllActions = `-- name: GetAllActions :many
SELECT id, leak_id, action_type, status, result, created_at, updated_at
FROM actions
`

func (q *Queries) GetAllActions(ctx context.Context) ([]Action, error) {
	rows, err := q.db.Query(ctx, getAllActions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.LeakID,
			&i.ActionType,
			&i.Status,
			&i.Result,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllActionsPaginated = `-- name: GetAllActionsPaginated :many
SELECT id, leak_id, action_type, status, result, created_at, updated_at
FROM actions
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllActionsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllActionsPaginated(ctx context.Context, arg GetAllActionsPaginatedParams) ([]Action, error) {
	rows, err := q.db.Query(ctx, getAllActionsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(
			&i.ID,
			&i.LeakID,
			&i.ActionType,
			&i.Status,
			&i.Result,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAction = `-- name: UpdateAction :one
UPDATE actions 
SET 
    action_type = CASE WHEN $2::action_type_enum IS NOT NULL THEN $2::action_type_enum ELSE action_type END, 
    status = CASE WHEN $3::action_status_enum IS NOT NULL THEN $3::action_status_enum ELSE status END, 
    result = CASE WHEN $4::action_result_enum IS NOT NULL THEN $4::action_result_enum ELSE result END 
WHERE id = $1 
RETURNING id, leak_id, action_type, status, result, created_at, updated_at
`

type UpdateActionParams struct {
	ID         pgtype.UUID          `json:"id"`
	ActionType NullActionTypeEnum   `json:"action_type"`
	Status     NullActionStatusEnum `json:"status"`
	Result     NullActionResultEnum `json:"result"`
}

func (q *Queries) UpdateAction(ctx context.Context, arg UpdateActionParams) (Action, error) {
	row := q.db.QueryRow(ctx, updateAction,
		arg.ID,
		arg.ActionType,
		arg.Status,
		arg.Result,
	)
	var i Action
	err := row.Scan(
		&i.ID,
		&i.LeakID,
		&i.ActionType,
		&i.Status,
		&i.Result,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
