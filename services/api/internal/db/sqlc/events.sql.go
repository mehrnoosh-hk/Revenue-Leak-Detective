// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllEvents = `-- name: CountAllEvents :one
SELECT COUNT(*) FROM events
`

func (q *Queries) CountAllEvents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAllEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (tenant_id, provider_id, event_type, event_id, status, data) 
VALUES ($1, $2, $3, $4, $5, $6) 
RETURNING id, tenant_id, provider_id, event_type, event_id, status, data, created_at, updated_at
`

type CreateEventParams struct {
	TenantID   pgtype.UUID     `json:"tenant_id"`
	ProviderID pgtype.UUID     `json:"provider_id"`
	EventType  EventTypeEnum   `json:"event_type"`
	EventID    string          `json:"event_id"`
	Status     EventStatusEnum `json:"status"`
	Data       json.RawMessage `json:"data"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.TenantID,
		arg.ProviderID,
		arg.EventType,
		arg.EventID,
		arg.Status,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.ProviderID,
		&i.EventType,
		&i.EventID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :execrows
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteEvent, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllEvents = `-- name: GetAllEvents :many
SELECT id, tenant_id, provider_id, event_type, event_id, status, data, created_at, updated_at 
FROM events
ORDER BY created_at DESC
`

func (q *Queries) GetAllEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.ProviderID,
			&i.EventType,
			&i.EventID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllEventsPaginated = `-- name: GetAllEventsPaginated :many
SELECT id, tenant_id, provider_id, event_type, event_id, status, data, created_at, updated_at 
FROM events
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllEventsPaginatedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllEventsPaginated(ctx context.Context, arg GetAllEventsPaginatedParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getAllEventsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.ProviderID,
			&i.EventType,
			&i.EventID,
			&i.Status,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventByID = `-- name: GetEventByID :one
SELECT 
  id, tenant_id, provider_id, event_type, event_id, status, data, created_at, updated_at 
FROM events 
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id pgtype.UUID) (Event, error) {
	row := q.db.QueryRow(ctx, getEventByID, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.ProviderID,
		&i.EventType,
		&i.EventID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET
  tenant_id = CASE WHEN $1::uuid IS NOT NULL THEN $1::uuid ELSE tenant_id END,
  provider_id = CASE WHEN $2::uuid IS NOT NULL THEN $2::uuid ELSE provider_id END,
  event_type = CASE WHEN $3::event_type_enum IS NOT NULL THEN $3::event_type_enum ELSE event_type END,
  event_id = CASE WHEN $4::varchar IS NOT NULL THEN $4::varchar ELSE event_id END,
  status = CASE WHEN $5::event_status_enum IS NOT NULL THEN $5::event_status_enum ELSE status END,
  data = CASE WHEN $6::jsonb IS NOT NULL THEN $6::jsonb ELSE data END
WHERE id = $7
RETURNING id, tenant_id, provider_id, event_type, event_id, status, data, created_at, updated_at
`

type UpdateEventParams struct {
	TenantID   pgtype.UUID         `json:"tenant_id"`
	ProviderID pgtype.UUID         `json:"provider_id"`
	EventType  NullEventTypeEnum   `json:"event_type"`
	EventID    *string             `json:"event_id"`
	Status     NullEventStatusEnum `json:"status"`
	Data       []byte              `json:"data"`
	ID         pgtype.UUID         `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.TenantID,
		arg.ProviderID,
		arg.EventType,
		arg.EventID,
		arg.Status,
		arg.Data,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.ProviderID,
		&i.EventType,
		&i.EventID,
		&i.Status,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
