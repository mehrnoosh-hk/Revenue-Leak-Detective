// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, external_id)
VALUES (
    $1, 
    $2, 
    CASE WHEN $3::VARCHAR(255) IS NOT NULL THEN $3::VARCHAR(255) ELSE NULL END
)
RETURNING id, email, name, external_id, created_at, updated_at
`

type CreateUserParams struct {
	Email      string  `json:"email"`
	Name       string  `json:"name"`
	ExternalID *string `json:"external_id"`
}

type CreateUserRow struct {
	ID         pgtype.UUID        `json:"id"`
	Email      string             `json:"email"`
	Name       string             `json:"name"`
	ExternalID *string            `json:"external_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Name, arg.ExternalID)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUser, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, name, external_id, created_at, updated_at FROM users
`

type GetAllUsersRow struct {
	ID         pgtype.UUID        `json:"id"`
	Email      string             `json:"email"`
	Name       string             `json:"name"`
	ExternalID *string            `json:"external_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.ExternalID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT id, email, name, external_id, created_at, updated_at FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID         pgtype.UUID        `json:"id"`
	Email      string             `json:"email"`
	Name       string             `json:"name"`
	ExternalID *string            `json:"external_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

// users table queries
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, name, external_id, created_at, updated_at FROM users WHERE id = $1
`

type GetUserByIdRow struct {
	ID         pgtype.UUID        `json:"id"`
	Email      string             `json:"email"`
	Name       string             `json:"name"`
	ExternalID *string            `json:"external_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
    email = CASE WHEN $2::VARCHAR(255) IS NOT NULL THEN $2::VARCHAR(255) ELSE email END, 
    name = CASE WHEN $3::VARCHAR(255) IS NOT NULL THEN $3::VARCHAR(255) ELSE name END, 
    external_id = CASE WHEN $4::VARCHAR(255) IS NOT NULL THEN $4::VARCHAR(255) ELSE external_id END 
WHERE id = $1 
RETURNING id, email, name, external_id, created_at, updated_at
`

type UpdateUserParams struct {
	ID         pgtype.UUID `json:"id"`
	Email      *string     `json:"email"`
	Name       *string     `json:"name"`
	ExternalID *string     `json:"external_id"`
}

type UpdateUserRow struct {
	ID         pgtype.UUID        `json:"id"`
	Email      string             `json:"email"`
	Name       string             `json:"name"`
	ExternalID *string            `json:"external_id"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.ExternalID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
