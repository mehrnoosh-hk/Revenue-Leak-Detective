# Build stage
FROM golang:1.23.2-alpine AS builder

# Install necessary build tools
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy the entire repository first (needed for module context)
COPY . .

# Set working directory to the Go service
WORKDIR /app/services/api

# Download dependencies (now in correct directory with go.mod)
RUN go mod download && go mod verify

# Build the application with optimizations
# Build info injection using ldflags (matches your Makefile approach)
ARG VERSION=dev
ARG COMMIT=unknown
ARG DATE=unknown

RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-X main.Version=${VERSION} -X main.Commit=${COMMIT} -X main.Date=${DATE} -w -s -extldflags \"-static\"" \
    -a -installsuffix cgo \
    -o /app/main ./cmd/main.go

# Final stage
FROM scratch

# Copy ca-certificates from builder stage
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the binary
COPY --from=builder /app/main /main

# Create non-root user (using numeric ID for scratch image)
USER 65534:65534

# Expose port
EXPOSE 8080

# Health check - using the --health flag that exists in your main.go
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/main", "--health"] || exit 1

# Run the application
ENTRYPOINT ["/main"]