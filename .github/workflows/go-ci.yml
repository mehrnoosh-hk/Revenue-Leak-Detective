name: Go CI

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths: ["services/**", "Makefile", ".github/workflows/go-ci.yml"]
  pull_request:
    branches: [main, develop]
    paths: ["services/**", "Makefile", ".github/workflows/go-ci.yml"]

jobs:
  # Detect which services have changed
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'services/api/**'

  # Lint API service
  lint-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true'
    defaults:
      run:
        working-directory: ./services/api

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.2"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-api-${{ hashFiles('services/api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-api-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest
          working-directory: ./services/api
          args: --timeout=10m


  # Sqlc-Verify check if the SQLC-generated code is up-to-date
  sqlc-verify:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./services/api
    steps:
    - uses: actions/checkout@v3
    - uses: sqlc-dev/setup-sqlc@v3
      with:
        sqlc-version: '1.30.0'
    - uses: sqlc-dev/action-setup-postgres@master
      with:
        postgres-version: "16"
      id: postgres
    - run: sqlc verify
      env:
        POSTGRESQL_SERVER_URI: ${{ steps.postgres.outputs.connection-uri }}?sslmode=disable
        SQLC_AUTH_TOKEN: ${{ secrets.SQLC_AUTH_TOKEN }}
  
  # Validate database migrations against disposable Postgres
  migrate-validate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true'
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rld_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: ./services/api

    steps:
      - uses: actions/checkout@v4

      - name: Install migrate CLI
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.1/migrate.linux-amd64.tar.gz | sudo tar -xz -C /usr/local/bin migrate

      - name: Apply and rollback migrations
        env:
          POSTGRES_URL: postgres://postgres:postgres@localhost:5432/rld_test?sslmode=disable
        run: |
          migrate -path ./migrations -database "$POSTGRES_URL" up
          migrate -path ./migrations -database "$POSTGRES_URL" down -force

  # Lint & Test API service
  test-api:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true'
    defaults:
      run:
        working-directory: ./services/api

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.2"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-api-${{ hashFiles('services/api/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-api-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -timeout 30s ./...

      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: mehrnoosh-hk/Revenue-Leak-Detective

  # Summary job that always runs to provide consistent status checks
  ci-status:
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-api, sqlc-verify, migrate-validate, test-api]
    if: always()  # Always run regardless of other job outcomes
    steps:
      - name: Determine CI Status
        run: |
          echo "API changed: ${{ needs.detect-changes.outputs.api-changed }}"
          echo "Test API result: ${{ needs.test-api.result }}"
          
          if [[ "${{ needs.detect-changes.outputs.api-changed }}" == "true" ]]; then
            # API changed, so we expect test-api to have run
            if [[ "${{ needs.test-api.result }}" == "success" ]]; then
              echo "✅ API service tests passed"
              exit 0
            else
              echo "❌ API service tests failed"
              exit 1
            fi
          else
            # No API changes, this is fine
            echo "ℹ️  No service changes detected - CI passed (no tests needed)"
            echo "This typically happens when modifying documentation, configs, or other non-service files."
            exit 0
          fi
